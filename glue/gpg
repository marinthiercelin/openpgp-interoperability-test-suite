#!/bin/bash
set -e

# OpenPGP Interoperability Test Suite Generic Functionality using GnuPG
# Author: Daniel Kahn Gillmor
# Date: 2019-10-23
# License: MIT (see below)

# Permission is hereby granted, free of charge, to any person
# obtaining a copy of this software and associated documentation files
# (the "Software"), to deal in the Software without restriction,
# including without limitation the rights to use, copy, modify, merge,
# publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so,
# subject to the following conditions:
#
# The above copyright notice and this permission notice shall be
# included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS
# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.


GPG=${GNUPG_BIN:-gpg}
cmd="$1"
shift

homedir="$(mktemp -d)"
cleanup() {
    rm -rf "$homedir"
}
trap cleanup EXIT

if $GPG --dump-options | grep -q pinentry-mode; then
    gpgargs=(--batch --quiet --homedir="$homedir" --pinentry-mode=loopback --passphrase '' --trust-model=always --no-tty)
else
    gpgargs=(--batch --quiet --homedir="$homedir" --passphrase '' --trust-model=always --no-tty)
fi

gpgx() {
    "$GPG" "${gpgargs[@]}" "$@"
}

version() {
    gpgx --version | awk '/^gpg /{ print $1 " " $3; exit 0; } //{ exit 1 }'
}

generate() {
    local uid1="$1"
    shift
    gpgx --status-file "$homedir/keygen.status" --quick-gen-key "$uid1"
    local fpr=$(awk '{ if ($2 == "KEY_CREATED") { print $4 } }' < "$homedir/keygen.status")
    local uid
    for uid in "$@"; do
        gpgx --quick-add-uid "$fpr" "$uid"
    done
    gpgx --armor --export-secret-key "0x$fpr"
}

convert() {
    gpgx --import
    gpgx --armor --export
}

sign() {
    gpgx --import "$1"
    gpgx --armor --detach-sign
}

verify() {
    local signature="$1"
    shift
    local opts=(--status-fd 3)
    for cert in "$@"; do
        gpgx --import "$cert"
    done

    gpgx --status-file "$homedir/verify.status" --verify "$signature" -
    for timestamp in $(awk '{ if ($2 == "VALIDSIG") { print $5 } }' < "$homedir/verify.status"); do
        date -u -d "@$timestamp" '+%Y-%m-%dT%H:%M:%SZ'
    done
}

encrypt() {
    gpgx --import "$@"
    local recipients=()
    for keyid in $(gpgx -k --with-colons | awk -F: '/^pub/{ print $5 }'); do
        recipients+=(--recipient "$keyid")
    done
    gpgx "${recipients[@]}" --armor --encrypt
}

decrypt() {
    for key in "$@"; do
        gpgx --import "$key"
    done
    gpgx --decrypt
}

case "$cmd" in
    version|encrypt|decrypt|generate|convert|sign|verify)
        "$cmd" "$@"
        ;;
    *)
        exit 69
        ;;
esac
